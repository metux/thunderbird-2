<?xml version="1.0"?>

<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<bindings id="autocompleteBindings"
  xmlns="http://www.mozilla.org/xbl"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="glodacomplete-rich-result-popup" extends="chrome://global/content/bindings/autocomplete.xml#autocomplete-rich-result-popup">
    <implementation implements="nsIAutoCompletePopup">
      <method name="_appendCurrentResult">
        <body>
          <![CDATA[
          var controller = this.mInput.controller;

          // Process maxRows per chunk to improve performance and user experience
          for (let i = 0; i < this.maxRows; i++) {
            if (this._currentIndex >= this.matchCount)
              return;

            var item;

            // trim the leading/trailing whitespace
            var trimmedSearchString = controller.searchString.trim();

            let glodaCompleter = Cc["@mozilla.org/autocomplete/search;1?name=gloda"]
                                   .getService(Ci.nsIAutoCompleteSearch)
                                   .wrappedJSObject;
            var result = glodaCompleter.curResult;

            item = document.createXULElement("richlistitem", { is: result.getStyleAt(this._currentIndex) });

            // set these attributes before we set the class
            // so that we can use them from the constructor
            var row = result.getObjectAt(this._currentIndex);
            item.setAttribute("text", trimmedSearchString);
            item.setAttribute("type", result.getStyleAt(this._currentIndex));

            item.row = row;

            // set the class at the end so we can use the attributes
            // in the xbl constructor
            item.className = "autocomplete-richlistitem";
            this.richlistbox.appendChild(item);
            this._currentIndex++;
          }

          // yield after each batch of items so that typing the url bar is responsive
          setTimeout(() => this._appendCurrentResult(), 0);
          ]]>
        </body>
      </method>
      <method name="_invalidate">
        <body>
          <![CDATA[
          setTimeout(() => this.adjustHeight(), 0);

          // remove all child nodes because we never want to reuse them.
          while (this.richlistbox.hasChildNodes())
            this.richlistbox.lastChild.remove();

          this._currentIndex = 0;
          this._appendCurrentResult();
        ]]>
        </body>
      </method>
    </implementation>
  </binding>
</bindings>
