<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
  - License, v. 2.0. If a copy of the MPL was not distributed with this
  - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- import-globals-from aboutAddonsExtra.js -->

<!DOCTYPE bindings>

<bindings id="thunderbird-addon-bindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
  <binding id="thunderbird-addon-generic"
           extends="chrome://mozapps/content/extensions/extensions.xml#addon-generic">
    <implementation>
      <constructor><![CDATA[
        var {ExtensionParent} = ChromeUtils.import("resource://gre/modules/ExtensionParent.jsm");
        this._updateState = this._updateState.bind(this);
        ExtensionParent.apiManager.on("startup", this._updateState);
        ExtensionParent.apiManager.on("shutdown", this._updateState);
      ]]></constructor>
      <destructor><![CDATA[
        ExtensionParent.apiManager.off("startup", this._updateState);
        ExtensionParent.apiManager.off("shutdown", this._updateState);
      ]]></destructor>
      <method name="_updateState">
        <body><![CDATA[
          this.__proto__.__proto__._updateState.call(this);
          let undoButton = this._warningContainer.querySelector("button.undo-btn");

          if (ExtensionSupport.loadedLegacyExtensions.has(this.mAddon.id)) {
            this.setAttribute("active", "true");
          }

          if (ExtensionSupport.loadedLegacyExtensions.hasAnyState(this.mAddon.id, true)) {
            let {
              stringName,
              undoCommand,
            } = getTrueState(this.mAddon, "document.getBindingParent(this).mAddon");

            if (stringName) {
              this.setAttribute("notification", "warning");
              this.removeAttribute("pending");

              this._warningLink.hidden = true;
              this._warning.textContent = gStrings.mailExt.formatStringFromName(
                stringName, [this.mAddon.name, gStrings.brandShortName], 2
              );

              this._warningBtn.label = gStrings.mailExt.GetStringFromName(
                "warnLegacyRestartButton"
              );
              this._warningBtn.setAttribute("oncommand", "BrowserUtils.restartApplication()");
              this._warningBtn.hidden = false;

              if (undoCommand) {
                if (!undoButton) {
                  undoButton = document.createXULElement("button");
                  undoButton.className = "button-link undo-btn";
                  undoButton.setAttribute(
                    "label", gStrings.mailExt.GetStringFromName("warnLegacyUndoButton")
                  );
                  // We shouldn't really attach non-anonymous content to anonymous content,
                  // but we can.
                  this._warningContainer.insertBefore(
                    undoButton, this._warningContainer.lastElementChild
                  );
                }
                undoButton.setAttribute("oncommand", undoCommand);
                undoButton.hidden = false;
              } else if (undoButton) {
                undoButton.hidden = true;
              }
              return;
            }
          }

          if (undoButton) {
            undoButton.hidden = true;
          }
        ]]></body>
      </method>
    </implementation>
  </binding>
</bindings>
