<?xml version="1.0" encoding="UTF-8"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- import-globals-from calendar-views-utils.js -->

<!DOCTYPE bindings SYSTEM "chrome://global/locale/global.dtd" >

<bindings id="calendar-month-view-bindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="calendar-month-day-box-item" extends="chrome://calendar/content/calendar-view-core.xml#calendar-editable-item">
    <content mousethrough="never" tooltip="itemTooltip">
      <xul:vbox flex="1">
        <xul:hbox>
          <xul:box anonid="event-container"
                   class="calendar-color-box"
                   xbl:inherits="calendar-uri,calendar-id"
                   flex="1">
            <xul:box class="calendar-event-selection" orient="horizontal" flex="1">
              <xul:stack anonid="eventbox"
                         class="calendar-event-box-container"
                         xbl:inherits="readonly,flashing,alarm,allday,priority,progress,status,calendar,categories"
                         flex="1">
                <xul:hbox anonid="event-detail-box"
                          class="calendar-event-details">
                  <xul:vbox pack="center">
                    <xul:image anonid="item-icon"
                               class="calendar-item-image"
                               xbl:inherits="progress,allday,itemType,todoType"/>
                  </xul:vbox>
                  <xul:label anonid="item-label"
                             class="calendar-month-day-box-item-label"
                             xbl:inherits="context"/>
                  <xul:vbox align="left"
                            flex="1"
                            xbl:inherits="context">
                    <xul:label anonid="event-name"
                               crop="end"
                               flex="1"
                               style="margin: 0;"/>
                    <xul:textbox anonid="event-name-textbox"
                                 class="plain calendar-event-name-textbox"
                                 crop="end"
                                 hidden="true"
                                 wrap="true"/>
                    <xul:spacer flex="1"/>
                  </xul:vbox>
                  <xul:stack anonid="category-box-stack">
                    <xul:calendar-category-box anonid="category-box" xbl:inherits="categories" pack="end"/>
                    <xul:hbox align="center">
                      <xul:hbox anonid="alarm-icons-box"
                                class="alarm-icons-box"
                                pack="end"
                                align="top"
                                xbl:inherits="flashing"/>
                      <xul:image anonid="item-classification-box"
                                 class="item-classification-box"
                                 pack="end"/>
                    </xul:hbox>
                  </xul:stack>
                </xul:hbox>
              </xul:stack>
            </xul:box>
          </xul:box>
        </xul:hbox>
      </xul:vbox>
    </content>
    <implementation>
      <property name="occurrence">
        <getter><![CDATA[
            return this.mOccurrence;
        ]]></getter>
        <setter><![CDATA[
            cal.ASSERT(!this.mOccurrence, "Code changes needed to set the occurrence twice", true);
            this.mOccurrence = val;
            if (cal.item.isEvent(val)) {
                if (!val.startDate.isDate) {
                    let icon = document.getAnonymousElementByAttribute(this, "anonid", "item-icon");
                    let label = document.getAnonymousElementByAttribute(this, "anonid", "item-label");
                    let formatter = Cc["@mozilla.org/calendar/datetime-formatter;1"]
                                      .getService(Ci.calIDateTimeFormatter);
                    let timezone = this.calendarView ? this.calendarView.mTimezone
                                                     : cal.dtz.defaultTimezone;
                    let parentDate = this.parentBox.date;
                    let parentTime = cal.createDateTime();
                    parentTime.resetTo(parentDate.year, parentDate.month, parentDate.day, 0, 0, 0, timezone);
                    let startTime = val.startDate.getInTimezone(timezone);
                    let endTime = val.endDate.getInTimezone(timezone);
                    let nextDay = parentTime.clone();
                    nextDay.day++;
                    let comp = endTime.compare(nextDay);
                    if (startTime.compare(parentTime) == -1) {
                        if (comp == 1) {
                            icon.setAttribute("type", "continue");
                        } else if (comp == 0) {
                            icon.setAttribute("type", "start");
                        } else {
                            icon.setAttribute("type", "end");
                            label.value = formatter.formatTime(endTime);
                        }
                    } else if (comp == 1) {
                        icon.setAttribute("type", "start");
                        label.value = formatter.formatTime(startTime);
                    } else {
                        label.value = formatter.formatTime(startTime);
                    }
                    label.setAttribute("time", "true");
                }
            }

            this.setEditableLabel();
            this.setCSSClasses();
            return val;
        ]]></setter>
      </property>
    </implementation>
  </binding>

  <binding id="calendar-month-day-box" extends="chrome://calendar/content/widgets/calendar-widgets.xml#dragndropContainer">
    <content orient="vertical">
      <xul:hbox anonid="monthday-labels" style="overflow: hidden;">
        <xul:label anonid="week-label"
                   flex="1"
                   crop="end"
                   hidden="true"
                   mousethrough="always"
                   class="calendar-month-day-box-week-label calendar-month-day-box-date-label"
                   xbl:inherits="relation,selected"/>
        <xul:label anonid="day-label"
                   flex="1"
                   mousethrough="always"
                   class="calendar-month-day-box-date-label"
                   xbl:inherits="relation,selected,value"/>
      </xul:hbox>
      <xul:vbox anonid="day-items" class="calendar-month-day-box-items-box" flex="1">
        <children/>
      </xul:vbox>
    </content>

    <implementation>
      <field name="mDate">null</field>
      <field name="mItemHash">{}</field>
      <field name="mShowMonthLabel">false</field>

      <property name="date"
                onget="return this.mDate"
                onset="this.setDate(val); return val;"/>

      <property name="selected">
        <getter><![CDATA[
            let sel = this.getAttribute("selected");
            if (sel && sel == "true") {
                return true;
            }

            return false;
        ]]></getter>
        <setter><![CDATA[
            if (val) {
                this.setAttribute("selected", "true");
            } else {
                this.removeAttribute("selected");
            }
            return val;
        ]]></setter>
      </property>

      <property name="dayitems">
        <getter><![CDATA[
            return document.getAnonymousElementByAttribute(this, "anonid", "day-items");
        ]]></getter>
      </property>

      <property name="showMonthLabel">
        <getter><![CDATA[
            return this.mShowMonthLabel;
        ]]></getter>
        <setter><![CDATA[
            if (this.mShowMonthLabel == val) {
                return val;
            }
            this.mShowMonthLabel = val;

            if (!this.mDate) {
                return val;
            }
            if (val) {
                this.setAttribute("value", cal.getDateFormatter().formatDateWithoutYear(this.mDate));
            } else {
                this.setAttribute("value", this.mDate.day);
            }
            return val;
        ]]></setter>
      </property>

      <method name="setDate">
        <parameter name="aDate"/>
        <body><![CDATA[
            if (!aDate) {
                throw Cr.NS_ERROR_NULL_POINTER;
            }

            // Remove all the old events
            this.mItemHash = {};
            removeChildren(this);

            if (this.mDate && this.mDate.compare(aDate) == 0) {
                return;
            }

            this.mDate = aDate;

            // Set up DOM attributes for custom CSS coloring.
            let weekTitle = cal.getWeekInfoService().getWeekTitle(aDate);
            this.setAttribute("year", aDate.year);
            this.setAttribute("month", aDate.month + 1);
            this.setAttribute("week", weekTitle);
            this.setAttribute("day", aDate.day);

            if (this.mShowMonthLabel) {
                let monthName = cal.l10n.getDateFmtString(`month.${aDate.month + 1}.Mmm`);
                this.setAttribute("value", aDate.day + " " + monthName);
            } else {
                this.setAttribute("value", aDate.day);
            }
        ]]></body>
      </method>

      <method name="addItem">
        <parameter name="aItem"/>
        <body><![CDATA[
            if (aItem.hashId in this.mItemHash) {
                this.deleteItem(aItem);
            }

            let box = document.createXULElement("calendar-month-day-box-item");
            let context = this.getAttribute("item-context") ||
                          this.getAttribute("context");
            box.setAttribute("context", context);
            box.setAttribute("calendar-uri", aItem.calendar.uri.spec);
            box.setAttribute("calendar-id", aItem.calendar.id);

            cal.data.binaryInsertNode(this, box, aItem, cal.view.compareItems, false);

            box.calendarView = this.calendarView;
            box.item = aItem;
            box.parentBox = this;
            box.occurrence = aItem;

            this.mItemHash[aItem.hashId] = box;
            return box;
        ]]></body>
      </method>

      <method name="selectItem">
        <parameter name="aItem"/>
        <body><![CDATA[
            if (aItem.hashId in this.mItemHash) {
                this.mItemHash[aItem.hashId].selected = true;
            }
        ]]></body>
      </method>

      <method name="unselectItem">
        <parameter name="aItem"/>
        <body><![CDATA[
            if (aItem.hashId in this.mItemHash) {
                this.mItemHash[aItem.hashId].selected = false;
            }
        ]]></body>
      </method>

      <method name="deleteItem">
        <parameter name="aItem"/>
        <body><![CDATA[
            if (aItem.hashId in this.mItemHash) {
                let node = this.mItemHash[aItem.hashId];
                node.remove();
                delete this.mItemHash[aItem.hashId];
            }
        ]]></body>
      </method>

      <method name="onDropItem">
        <parameter name="aItem"/>
        <body><![CDATA[
            // When item's timezone is different than the default one, the
            // item might get moved on a day different than the drop day.
            // Changing the drop day allows to compensate a possible difference.

            // Figure out if the timezones cause a days difference.
            let start = (aItem[cal.dtz.startDateProp(aItem)] ||
                         aItem[cal.dtz.endDateProp(aItem)]).clone();
            let dayboxDate = this.mDate.clone();
            if (start.timezone != dayboxDate.timezone) {
                let startInDefaultTz = start.clone().getInTimezone(dayboxDate.timezone);
                start.isDate = true;
                startInDefaultTz.isDate = true;
                startInDefaultTz.timezone = start.timezone;
                let dayDiff = start.subtractDate(startInDefaultTz);
                // Change the day where to drop the item.
                dayboxDate.addDuration(dayDiff);
            }

            return cal.item.moveToDate(aItem, dayboxDate);
        ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="mousedown"><![CDATA[
          event.stopPropagation();
          if (this.mDate) {
              this.calendarView.selectedDay = this.mDate;
          }
      ]]></handler>
      <handler event="dblclick"><![CDATA[
          event.stopPropagation();
          this.calendarView.controller.createNewEvent();
      ]]></handler>
      <handler event="click" button="0"><![CDATA[
          if (!(event.ctrlKey || event.metaKey)) {
              this.calendarView.setSelectedItems(0, []);
          }
      ]]></handler>
      <handler event="wheel"><![CDATA[
          if (cal.view.getParentNodeOrThisByAttribute(event.originalTarget, "anonid", "day-label") == null) {
              if (this.dayitems.scrollHeight > this.dayitems.clientHeight) {
                  event.stopPropagation();
              }
          }
      ]]></handler>
    </handlers>
  </binding>
</bindings>
